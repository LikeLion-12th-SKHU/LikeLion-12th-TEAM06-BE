plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.likelion'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    //aws
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // Swagger
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.1.0'
    testImplementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-api', version: '2.1.0'

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Google OAuth
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    implementation 'com.google.code.gson:gson:2.10.1'
}

tasks.named('test') {
    useJUnitPlatform()
}

//def frontendDir = "$projectDir/src/main/plantication"
//
//// 운영체제에 따라 npm 경로를 설정합니다.
//def npmCommand = "/opt/homebrew/bin/npm" // 절대 경로로 설정
//
//sourceSets {
//    main {
//        resources {
//            srcDirs = ["$projectDir/src/main/resources"]
//        }
//    }
//}
//
//processResources {
//    dependsOn "copyReactBuildFiles"
//}
//
//task installReact(type: Exec) {
//    workingDir "$frontendDir"
//    inputs.dir "$frontendDir"
//    group = BasePlugin.BUILD_GROUP
//    commandLine npmCommand, 'install'
//
//    // 추가적인 로그를 출력하도록 설정
//    doFirst {
//        println "Running npm install in ${frontendDir}"
//    }
//
//    // 표준 출력과 오류 출력을 캡처하여 출력
//    standardOutput = new ByteArrayOutputStream()
//    errorOutput = new ByteArrayOutputStream()
//    ignoreExitValue = true
//    doLast {
//        def output = standardOutput.toString()
//        def error = errorOutput.toString()
//        if (!output.isEmpty()) println "Output:\n$output"
//        if (!error.isEmpty()) println "Error:\n$error"
//    }
//}
//
//task buildReact(type: Exec) {
//    dependsOn "installReact"
//    workingDir "$frontendDir"
//    inputs.dir "$frontendDir"
//    group = BasePlugin.BUILD_GROUP
//    commandLine npmCommand, 'run', 'build'
//
//    // 추가적인 로그를 출력하도록 설정
//    doFirst {
//        println "Running npm run build in ${frontendDir}"
//    }
//
//    // 표준 출력과 오류 출력을 캡처하여 출력
//    standardOutput = new ByteArrayOutputStream()
//    errorOutput = new ByteArrayOutputStream()
//    ignoreExitValue = true
//    doLast {
//        def output = standardOutput.toString()
//        def error = errorOutput.toString()
//        if (!output.isEmpty()) println "Output:\n$output"
//        if (!error.isEmpty()) println "Error:\n$error"
//    }
//}
//
//task copyReactBuildFiles(type: Copy) {
//    dependsOn "buildReact"
//    from "$frontendDir/build"
//    into "$projectDir/src/main/resources/static"
//}
//
//tasks.build.dependsOn copyReactBuildFiles
